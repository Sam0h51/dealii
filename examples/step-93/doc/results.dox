<h1>Results</h1>

When you run the program with the step target function (in 2D), the output looks something like:

@code
Number of active cells: 16384
Number of degrees of freedom: 66049+66049+66049 = 132102
Number of nonlocal dofs: 4
Beginning solve
DEAL:minres::Starting value 0.00460136
DEAL:minres::Convergence step 39947 value 4.59753e-09
Wall time: 60.3742s
The c coefficients were
	c1: 28.754
	c2: -6.5185
	c3: -6.5185
	c4: -1.62126
@endcode

When you run the program with the Gaussian target function (in 2D), the output should look like:

@code
Number of active cells: 16384
Number of degrees of freedom: 66049+66049+66049 = 132102
Number of nonlocal dofs: 4
Beginning solve
DEAL:minres::Starting value 0.00326221
DEAL:minres::Convergence step 62131 value 3.17291e-09
Wall time: 85.987s
The c coefficients were
	c1: 23.553
	c2: -4.86562
	c3: -4.86562
	c4: -1.42344
@endcode

The goal of this program is to determine which temperature settings best match the target function, so first lets see what these targets look like

<div class="twocolumn" style="width: 80%">
  <div>
    <center><b>Step Target Function</b></center>
  </div>
  <div>
    <center><b>Gaussian Target Function</b></center>
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1otECph0YD1P6i7mbhxUEgBBND_lzUgZ5"
         alt="Step target function">
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/151HH1SgZnCOboQck-zw-FTyckVXTe7_T"
         alt="Gaussian target function">
  </div>
</div>

After solving the Lagrangian system, we arrive at solutions $U_{step}$ and $U_{gauss}$ that look like:

<div class="twocolumn" style="width: 80%">
  <div>
    <center><b>$U_{step}$</b></center>
  </div>
  <div>
    <center><b>$U_{gauss}$</b></center>
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1Fe80xChN6LnF2gLWkOt6apUNx8vo9-SU"
         alt="Solution for step shaped target function">
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1OcrK1bd2Nb-OBK7nEYB-OV8IR396hlUq"
         alt="Solution for Gaussian target function">
  </div>
</div>

Notice that $U_{gauss}$ matches the target much better than $U_{step}$. Intuitively, this makes sense: in general, solutions to the heat equation look something like Gaussian curves, so the Gaussian target function is a much more "natural" thing to match than a sharp step function. We can also see this in the optimal heat profiles.

<div class="twocolumn" style="width: 80%">
  <div>
    <center><b>Heat plate settings for matching step function</b></center>
  </div>
  <div>
    <center><b>Heat plate settings for matching Gaussian</b></center>
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1Aq4-WCNyUXA_bVgAVeTj-s3HnsDj4AAu"
         alt="Heat plate settings for matching step function">
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1zU9ZEO1fzphxipGR8_In52LDzKJXb1Ae"
         alt="Heat plate settings for matching Gaussian">
  </div>
</div>

Notice that for the Gaussian target, the 4 plates have relatively low values that they are set to. In contrast, to try to match the step function, much more extreme temperatures are applied.

While it does not contain much useful information, we can also plot the Lagrange multiplier $\Lambda$, which has an interesting shape:

<div class="twocolumn" style="width: 80%">
  <div>
    <center><b>$\Lambda_{step}$</b></center>
  </div>
  <div>
    <center><b>$\Lambda_{gauss}$</b></center>
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1K7T5th0VWdtXPmO7pNVZNQpZ8wbsFRlU"
         alt="Lagrange multiplier for step target function">
  </div>
  <div>
    <img src="https://lh3.googleusercontent.com/d/1YCwYsVEAeWGdiX6ZnJtXP2bWhQopcMhC"
         alt="Lagrange multiplier for Gaussian target function">
  </div>
</div>

<h3>Possibilities for extensions</h3>

There are a few ways that this program could be extended, which we list below.

1. As mentioned in the code documentation, this program does not make use of any preconditioners before solving. This is because, for a 2D problem, the code runs fast enough that optimization is not necessary. However, for larger problems, it would be good if the solver ran more quickly. See the "Possibilities for extensions" section of step-6 for a more detailed discussion on to change preconditioners. We should note that since the block matrix we use has many 0's on the diagonal, preconditioners like PreconditionJacobi will not work.

2. To validate the optimization problem is working correctly, we could try to match a target function which is itself a solution to the Poisson equation with prescribed heat profile. If the optimization problem is being solved correctly, it should be able to perfectly match this solution. To create such a function, we would need to first solve the Poisson problem on a scalar field, with a RHS described by the chosen heat profile. See step-7 for more information on the method of manufactured solutions.
